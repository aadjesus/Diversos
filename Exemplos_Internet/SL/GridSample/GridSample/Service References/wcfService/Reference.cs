//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace GridSample.wcfService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SelectClientResult", Namespace="http://schemas.datacontract.org/2004/07/GridSample.Web")]
    public partial class SelectClientResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryNameField;
        
        private short ClientIDField;
        
        private string ClientNameField;
        
        private System.DateTime DateofIssueField;
        
        private string SubClientNameField;
        
        private int UpdatedByField;
        
        private System.DateTime UpdatedDateField;
        
        private string issueCommentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateofIssue {
            get {
                return this.DateofIssueField;
            }
            set {
                if ((this.DateofIssueField.Equals(value) != true)) {
                    this.DateofIssueField = value;
                    this.RaisePropertyChanged("DateofIssue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubClientName {
            get {
                return this.SubClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubClientNameField, value) != true)) {
                    this.SubClientNameField = value;
                    this.RaisePropertyChanged("SubClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UpdatedBy {
            get {
                return this.UpdatedByField;
            }
            set {
                if ((this.UpdatedByField.Equals(value) != true)) {
                    this.UpdatedByField = value;
                    this.RaisePropertyChanged("UpdatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdatedDate {
            get {
                return this.UpdatedDateField;
            }
            set {
                if ((this.UpdatedDateField.Equals(value) != true)) {
                    this.UpdatedDateField = value;
                    this.RaisePropertyChanged("UpdatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string issueComment {
            get {
                return this.issueCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.issueCommentField, value) != true)) {
                    this.issueCommentField = value;
                    this.RaisePropertyChanged("issueComment");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="wcfService.DBService")]
    public interface DBService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:DBService/GetClientList", ReplyAction="urn:DBService/GetClientListResponse")]
        System.IAsyncResult BeginGetClientList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult> EndGetClientList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DBServiceChannel : GridSample.wcfService.DBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBServiceClient : System.ServiceModel.ClientBase<GridSample.wcfService.DBService>, GridSample.wcfService.DBService {
        
        private BeginOperationDelegate onBeginGetClientListDelegate;
        
        private EndOperationDelegate onEndGetClientListDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DBServiceClient() {
        }
        
        public DBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetClientListCompletedEventArgs> GetClientListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GridSample.wcfService.DBService.BeginGetClientList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult> GridSample.wcfService.DBService.EndGetClientList(System.IAsyncResult result) {
            return base.Channel.EndGetClientList(result);
        }
        
        private System.IAsyncResult OnBeginGetClientList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GridSample.wcfService.DBService)(this)).BeginGetClientList(callback, asyncState);
        }
        
        private object[] OnEndGetClientList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult> retVal = ((GridSample.wcfService.DBService)(this)).EndGetClientList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientListCompleted(object state) {
            if ((this.GetClientListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientListCompleted(this, new GetClientListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientListAsync() {
            this.GetClientListAsync(null);
        }
        
        public void GetClientListAsync(object userState) {
            if ((this.onBeginGetClientListDelegate == null)) {
                this.onBeginGetClientListDelegate = new BeginOperationDelegate(this.OnBeginGetClientList);
            }
            if ((this.onEndGetClientListDelegate == null)) {
                this.onEndGetClientListDelegate = new EndOperationDelegate(this.OnEndGetClientList);
            }
            if ((this.onGetClientListCompletedDelegate == null)) {
                this.onGetClientListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientListCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientListDelegate, null, this.onEndGetClientListDelegate, this.onGetClientListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GridSample.wcfService.DBService CreateChannel() {
            return new DBServiceClientChannel(this);
        }
        
        private class DBServiceClientChannel : ChannelBase<GridSample.wcfService.DBService>, GridSample.wcfService.DBService {
            
            public DBServiceClientChannel(System.ServiceModel.ClientBase<GridSample.wcfService.DBService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetClientList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetClientList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult> EndGetClientList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult> _result = ((System.Collections.ObjectModel.ObservableCollection<GridSample.wcfService.SelectClientResult>)(base.EndInvoke("GetClientList", _args, result)));
                return _result;
            }
        }
    }
}
