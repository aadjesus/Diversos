<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1</Title>
    <Shortcut>dpentity1</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by1</Title>
    <Shortcut>dpentity1by1</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by2</Title>
    <Shortcut>dpentity1by2</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by3</Title>
    <Shortcut>dpentity1by3</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by4</Title>
    <Shortcut>dpentity1by4</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by5</Title>
    <Shortcut>dpentity1by5</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by6</Title>
    <Shortcut>dpentity1by6</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by7</Title>
    <Shortcut>dpentity1by7</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by8</Title>
    <Shortcut>dpentity1by8</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity1by9</Title>
    <Shortcut>dpentity1by9</Shortcut>
    <Description>Strongly typed entity class with 1 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 1 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
public $ClassName$($Property1Type$ $Property1Name$)
{
this.$Property1Name$ = $Property1Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2</Title>
    <Shortcut>dpentity2</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by1</Title>
    <Shortcut>dpentity2by1</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by2</Title>
    <Shortcut>dpentity2by2</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by3</Title>
    <Shortcut>dpentity2by3</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by4</Title>
    <Shortcut>dpentity2by4</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by5</Title>
    <Shortcut>dpentity2by5</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by6</Title>
    <Shortcut>dpentity2by6</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by7</Title>
    <Shortcut>dpentity2by7</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by8</Title>
    <Shortcut>dpentity2by8</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity2by9</Title>
    <Shortcut>dpentity2by9</Shortcut>
    <Description>Strongly typed entity class with 2 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 2 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3</Title>
    <Shortcut>dpentity3</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by1</Title>
    <Shortcut>dpentity3by1</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by2</Title>
    <Shortcut>dpentity3by2</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by3</Title>
    <Shortcut>dpentity3by3</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by4</Title>
    <Shortcut>dpentity3by4</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by5</Title>
    <Shortcut>dpentity3by5</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by6</Title>
    <Shortcut>dpentity3by6</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by7</Title>
    <Shortcut>dpentity3by7</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by8</Title>
    <Shortcut>dpentity3by8</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity3by9</Title>
    <Shortcut>dpentity3by9</Shortcut>
    <Description>Strongly typed entity class with 3 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 3 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4</Title>
    <Shortcut>dpentity4</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
sb.Append("$Property4Name$ = " + $Property4Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by1</Title>
    <Shortcut>dpentity4by1</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by2</Title>
    <Shortcut>dpentity4by2</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by3</Title>
    <Shortcut>dpentity4by3</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by4</Title>
    <Shortcut>dpentity4by4</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by5</Title>
    <Shortcut>dpentity4by5</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by6</Title>
    <Shortcut>dpentity4by6</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by7</Title>
    <Shortcut>dpentity4by7</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by8</Title>
    <Shortcut>dpentity4by8</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity4by9</Title>
    <Shortcut>dpentity4by9</Shortcut>
    <Description>Strongly typed entity class with 4 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 4 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5</Title>
    <Shortcut>dpentity5</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
sb.Append("$Property4Name$ = " + $Property4Name$ + ";");
sb.Append("$Property5Name$ = " + $Property5Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by1</Title>
    <Shortcut>dpentity5by1</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by2</Title>
    <Shortcut>dpentity5by2</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by3</Title>
    <Shortcut>dpentity5by3</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by4</Title>
    <Shortcut>dpentity5by4</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by5</Title>
    <Shortcut>dpentity5by5</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by6</Title>
    <Shortcut>dpentity5by6</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by7</Title>
    <Shortcut>dpentity5by7</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by8</Title>
    <Shortcut>dpentity5by8</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity5by9</Title>
    <Shortcut>dpentity5by9</Shortcut>
    <Description>Strongly typed entity class with 5 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 5 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6</Title>
    <Shortcut>dpentity6</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
sb.Append("$Property4Name$ = " + $Property4Name$ + ";");
sb.Append("$Property5Name$ = " + $Property5Name$ + ";");
sb.Append("$Property6Name$ = " + $Property6Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by1</Title>
    <Shortcut>dpentity6by1</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by2</Title>
    <Shortcut>dpentity6by2</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by3</Title>
    <Shortcut>dpentity6by3</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by4</Title>
    <Shortcut>dpentity6by4</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by5</Title>
    <Shortcut>dpentity6by5</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by6</Title>
    <Shortcut>dpentity6by6</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by7</Title>
    <Shortcut>dpentity6by7</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by8</Title>
    <Shortcut>dpentity6by8</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity6by9</Title>
    <Shortcut>dpentity6by9</Shortcut>
    <Description>Strongly typed entity class with 6 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 6 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7</Title>
    <Shortcut>dpentity7</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
sb.Append("$Property4Name$ = " + $Property4Name$ + ";");
sb.Append("$Property5Name$ = " + $Property5Name$ + ";");
sb.Append("$Property6Name$ = " + $Property6Name$ + ";");
sb.Append("$Property7Name$ = " + $Property7Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by1</Title>
    <Shortcut>dpentity7by1</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by2</Title>
    <Shortcut>dpentity7by2</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by3</Title>
    <Shortcut>dpentity7by3</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by4</Title>
    <Shortcut>dpentity7by4</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by5</Title>
    <Shortcut>dpentity7by5</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by6</Title>
    <Shortcut>dpentity7by6</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by7</Title>
    <Shortcut>dpentity7by7</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by8</Title>
    <Shortcut>dpentity7by8</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity7by9</Title>
    <Shortcut>dpentity7by9</Shortcut>
    <Description>Strongly typed entity class with 7 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 7 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8</Title>
    <Shortcut>dpentity8</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
sb.Append("$Property4Name$ = " + $Property4Name$ + ";");
sb.Append("$Property5Name$ = " + $Property5Name$ + ";");
sb.Append("$Property6Name$ = " + $Property6Name$ + ";");
sb.Append("$Property7Name$ = " + $Property7Name$ + ";");
sb.Append("$Property8Name$ = " + $Property8Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by1</Title>
    <Shortcut>dpentity8by1</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by2</Title>
    <Shortcut>dpentity8by2</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by3</Title>
    <Shortcut>dpentity8by3</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by4</Title>
    <Shortcut>dpentity8by4</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by5</Title>
    <Shortcut>dpentity8by5</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by6</Title>
    <Shortcut>dpentity8by6</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by7</Title>
    <Shortcut>dpentity8by7</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by8</Title>
    <Shortcut>dpentity8by8</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity8by9</Title>
    <Shortcut>dpentity8by9</Shortcut>
    <Description>Strongly typed entity class with 8 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 8 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9</Title>
    <Shortcut>dpentity9</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 0 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 0 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$ + ";");
sb.Append("$Property2Name$ = " + $Property2Name$ + ";");
sb.Append("$Property3Name$ = " + $Property3Name$ + ";");
sb.Append("$Property4Name$ = " + $Property4Name$ + ";");
sb.Append("$Property5Name$ = " + $Property5Name$ + ";");
sb.Append("$Property6Name$ = " + $Property6Name$ + ";");
sb.Append("$Property7Name$ = " + $Property7Name$ + ";");
sb.Append("$Property8Name$ = " + $Property8Name$ + ";");
sb.Append("$Property9Name$ = " + $Property9Name$ + ";");
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by1</Title>
    <Shortcut>dpentity9by1</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 1 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 1 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by2</Title>
    <Shortcut>dpentity9by2</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 2 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 2 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by3</Title>
    <Shortcut>dpentity9by3</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 3 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 3 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by4</Title>
    <Shortcut>dpentity9by4</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 4 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 4 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by5</Title>
    <Shortcut>dpentity9by5</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 5 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 5 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by6</Title>
    <Shortcut>dpentity9by6</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 6 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 6 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by7</Title>
    <Shortcut>dpentity9by7</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 7 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 7 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by8</Title>
    <Shortcut>dpentity9by8</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 8 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 8 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>dpentity9by9</Title>
    <Shortcut>dpentity9by9</Shortcut>
    <Description>Strongly typed entity class with 9 dependency properties and 9 read-only dependency properties.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this entity class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Property1Name</ID>
        <ToolTip>1st property name.</ToolTip>
        <Default>Property1Name</Default>
      </Literal>
      <Literal>
        <ID>Property1Type</ID>
        <ToolTip>1st property type.</ToolTip>
        <Default>Property1Type</Default>
      </Literal>
      <Literal>
        <ID>Property2Name</ID>
        <ToolTip>2nd property name.</ToolTip>
        <Default>Property2Name</Default>
      </Literal>
      <Literal>
        <ID>Property2Type</ID>
        <ToolTip>2nd property type.</ToolTip>
        <Default>Property2Type</Default>
      </Literal>
      <Literal>
        <ID>Property3Name</ID>
        <ToolTip>3rd property name.</ToolTip>
        <Default>Property3Name</Default>
      </Literal>
      <Literal>
        <ID>Property3Type</ID>
        <ToolTip>3rd property type.</ToolTip>
        <Default>Property3Type</Default>
      </Literal>
      <Literal>
        <ID>Property4Name</ID>
        <ToolTip>4th property name.</ToolTip>
        <Default>Property4Name</Default>
      </Literal>
      <Literal>
        <ID>Property4Type</ID>
        <ToolTip>4th property type.</ToolTip>
        <Default>Property4Type</Default>
      </Literal>
      <Literal>
        <ID>Property5Name</ID>
        <ToolTip>5th property name.</ToolTip>
        <Default>Property5Name</Default>
      </Literal>
      <Literal>
        <ID>Property5Type</ID>
        <ToolTip>5th property type.</ToolTip>
        <Default>Property5Type</Default>
      </Literal>
      <Literal>
        <ID>Property6Name</ID>
        <ToolTip>6th property name.</ToolTip>
        <Default>Property6Name</Default>
      </Literal>
      <Literal>
        <ID>Property6Type</ID>
        <ToolTip>6th property type.</ToolTip>
        <Default>Property6Type</Default>
      </Literal>
      <Literal>
        <ID>Property7Name</ID>
        <ToolTip>7th property name.</ToolTip>
        <Default>Property7Name</Default>
      </Literal>
      <Literal>
        <ID>Property7Type</ID>
        <ToolTip>7th property type.</ToolTip>
        <Default>Property7Type</Default>
      </Literal>
      <Literal>
        <ID>Property8Name</ID>
        <ToolTip>8th property name.</ToolTip>
        <Default>Property8Name</Default>
      </Literal>
      <Literal>
        <ID>Property8Type</ID>
        <ToolTip>8th property type.</ToolTip>
        <Default>Property8Type</Default>
      </Literal>
      <Literal>
        <ID>Property9Name</ID>
        <ToolTip>9th property name.</ToolTip>
        <Default>Property9Name</Default>
      </Literal>
      <Literal>
        <ID>Property9Type</ID>
        <ToolTip>9th property type.</ToolTip>
        <Default>Property9Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Name</ID>
        <ToolTip>1st (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty1Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty1Type</ID>
        <ToolTip>1st (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty1Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Name</ID>
        <ToolTip>2nd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty2Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty2Type</ID>
        <ToolTip>2nd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty2Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Name</ID>
        <ToolTip>3rd (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty3Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty3Type</ID>
        <ToolTip>3rd (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty3Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Name</ID>
        <ToolTip>4th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty4Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty4Type</ID>
        <ToolTip>4th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty4Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Name</ID>
        <ToolTip>5th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty5Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty5Type</ID>
        <ToolTip>5th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty5Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Name</ID>
        <ToolTip>6th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty6Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty6Type</ID>
        <ToolTip>6th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty6Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Name</ID>
        <ToolTip>7th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty7Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty7Type</ID>
        <ToolTip>7th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty7Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Name</ID>
        <ToolTip>8th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty8Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty8Type</ID>
        <ToolTip>8th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty8Type</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Name</ID>
        <ToolTip>9th (read-only) property name.</ToolTip>
        <Default>ReadOnlyProperty9Name</Default>
      </Literal>
      <Literal>
        <ID>ReadOnlyProperty9Type</ID>
        <ToolTip>9th (read-only) property type.</ToolTip>
        <Default>ReadOnlyProperty9Type</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$ contains 9 read-write and 9 read-only dependency properties.
/// </summary>
public class $ClassName$ : DependencyObject, IEquatable<$ClassName$> {
#region Properties
/// <summary>
/// Identifies the <see cref="$Property1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property1Name$Property =
  DependencyProperty.Register("$Property1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($Property1Type$)));
/// <summary>
/// Gets or sets a value of $Property1Name$. This is a dependency property.
/// </summary>
public $Property1Type$ $Property1Name$
{
get { return ($Property1Type$)GetValue($Property1Name$Property); }
set { SetValue($Property1Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property2Name$Property =
  DependencyProperty.Register("$Property2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($Property2Type$)));
/// <summary>
/// Gets or sets a value of $Property2Name$. This is a dependency property.
/// </summary>
public $Property2Type$ $Property2Name$
{
get { return ($Property2Type$)GetValue($Property2Name$Property); }
set { SetValue($Property2Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property3Name$Property =
  DependencyProperty.Register("$Property3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($Property3Type$)));
/// <summary>
/// Gets or sets a value of $Property3Name$. This is a dependency property.
/// </summary>
public $Property3Type$ $Property3Name$
{
get { return ($Property3Type$)GetValue($Property3Name$Property); }
set { SetValue($Property3Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property4Name$Property =
  DependencyProperty.Register("$Property4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($Property4Type$)));
/// <summary>
/// Gets or sets a value of $Property4Name$. This is a dependency property.
/// </summary>
public $Property4Type$ $Property4Name$
{
get { return ($Property4Type$)GetValue($Property4Name$Property); }
set { SetValue($Property4Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property5Name$Property =
  DependencyProperty.Register("$Property5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($Property5Type$)));
/// <summary>
/// Gets or sets a value of $Property5Name$. This is a dependency property.
/// </summary>
public $Property5Type$ $Property5Name$
{
get { return ($Property5Type$)GetValue($Property5Name$Property); }
set { SetValue($Property5Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property6Name$Property =
  DependencyProperty.Register("$Property6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($Property6Type$)));
/// <summary>
/// Gets or sets a value of $Property6Name$. This is a dependency property.
/// </summary>
public $Property6Type$ $Property6Name$
{
get { return ($Property6Type$)GetValue($Property6Name$Property); }
set { SetValue($Property6Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property7Name$Property =
  DependencyProperty.Register("$Property7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($Property7Type$)));
/// <summary>
/// Gets or sets a value of $Property7Name$. This is a dependency property.
/// </summary>
public $Property7Type$ $Property7Name$
{
get { return ($Property7Type$)GetValue($Property7Name$Property); }
set { SetValue($Property7Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property8Name$Property =
  DependencyProperty.Register("$Property8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($Property8Type$)));
/// <summary>
/// Gets or sets a value of $Property8Name$. This is a dependency property.
/// </summary>
public $Property8Type$ $Property8Name$
{
get { return ($Property8Type$)GetValue($Property8Name$Property); }
set { SetValue($Property8Name$Property, value); }
}
/// <summary>
/// Identifies the <see cref="$Property9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $Property9Name$Property =
  DependencyProperty.Register("$Property9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($Property9Type$)));
/// <summary>
/// Gets or sets a value of $Property9Name$. This is a dependency property.
/// </summary>
public $Property9Type$ $Property9Name$
{
get { return ($Property9Type$)GetValue($Property9Name$Property); }
set { SetValue($Property9Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty1Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty1Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty1Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty1Name$Property =
DependencyProperty.Register("$ReadOnlyProperty1Name$", typeof($Property1Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty1Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty1Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty1Type$ $ReadOnlyProperty1Name$
{
get { return ($ReadOnlyProperty1Type$)GetValue($ReadOnlyProperty1Name$Property); }
private set { SetValue($ReadOnlyProperty1Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty2Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty2Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty2Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty2Name$Property =
DependencyProperty.Register("$ReadOnlyProperty2Name$", typeof($Property2Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty2Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty2Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty2Type$ $ReadOnlyProperty2Name$
{
get { return ($ReadOnlyProperty2Type$)GetValue($ReadOnlyProperty2Name$Property); }
private set { SetValue($ReadOnlyProperty2Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty3Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty3Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty3Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty3Name$Property =
DependencyProperty.Register("$ReadOnlyProperty3Name$", typeof($Property3Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty3Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty3Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty3Type$ $ReadOnlyProperty3Name$
{
get { return ($ReadOnlyProperty3Type$)GetValue($ReadOnlyProperty3Name$Property); }
private set { SetValue($ReadOnlyProperty3Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty4Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty4Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty4Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty4Name$Property =
DependencyProperty.Register("$ReadOnlyProperty4Name$", typeof($Property4Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty4Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty4Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty4Type$ $ReadOnlyProperty4Name$
{
get { return ($ReadOnlyProperty4Type$)GetValue($ReadOnlyProperty4Name$Property); }
private set { SetValue($ReadOnlyProperty4Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty5Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty5Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty5Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty5Name$Property =
DependencyProperty.Register("$ReadOnlyProperty5Name$", typeof($Property5Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty5Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty5Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty5Type$ $ReadOnlyProperty5Name$
{
get { return ($ReadOnlyProperty5Type$)GetValue($ReadOnlyProperty5Name$Property); }
private set { SetValue($ReadOnlyProperty5Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty6Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty6Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty6Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty6Name$Property =
DependencyProperty.Register("$ReadOnlyProperty6Name$", typeof($Property6Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty6Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty6Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty6Type$ $ReadOnlyProperty6Name$
{
get { return ($ReadOnlyProperty6Type$)GetValue($ReadOnlyProperty6Name$Property); }
private set { SetValue($ReadOnlyProperty6Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty7Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty7Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty7Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty7Name$Property =
DependencyProperty.Register("$ReadOnlyProperty7Name$", typeof($Property7Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty7Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty7Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty7Type$ $ReadOnlyProperty7Name$
{
get { return ($ReadOnlyProperty7Type$)GetValue($ReadOnlyProperty7Name$Property); }
private set { SetValue($ReadOnlyProperty7Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty8Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty8Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty8Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty8Name$Property =
DependencyProperty.Register("$ReadOnlyProperty8Name$", typeof($Property8Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty8Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty8Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty8Type$ $ReadOnlyProperty8Name$
{
get { return ($ReadOnlyProperty8Type$)GetValue($ReadOnlyProperty8Name$Property); }
private set { SetValue($ReadOnlyProperty8Name$Property, value); }
}
private static readonly DependencyPropertyKey $ReadOnlyProperty9Name$PropertyKey =
  DependencyProperty.RegisterReadOnly("ItemsView", typeof($ReadOnlyProperty9Type$), typeof($ClassName$),
    new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Identifies the <see cref="$ReadOnlyProperty9Name$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $ReadOnlyProperty9Name$Property =
DependencyProperty.Register("$ReadOnlyProperty9Name$", typeof($Property9Type$), typeof($ClassName$), new PropertyMetadata(default($ReadOnlyProperty9Type$)));
/// <summary>
/// Gets or sets a value of $ReadOnlyProperty9Name$. This is a dependency property.
/// </summary>
public $ReadOnlyProperty9Type$ $ReadOnlyProperty9Name$
{
get { return ($ReadOnlyProperty9Type$)GetValue($ReadOnlyProperty9Name$Property); }
private set { SetValue($ReadOnlyProperty9Name$Property, value); }
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
public $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Property1Name$">The $Property1Name$</param>
/// <param name="$Property2Name$">The $Property2Name$</param>
/// <param name="$Property3Name$">The $Property3Name$</param>
/// <param name="$Property4Name$">The $Property4Name$</param>
/// <param name="$Property5Name$">The $Property5Name$</param>
/// <param name="$Property6Name$">The $Property6Name$</param>
/// <param name="$Property7Name$">The $Property7Name$</param>
/// <param name="$Property8Name$">The $Property8Name$</param>
/// <param name="$Property9Name$">The $Property9Name$</param>
public $ClassName$($Property1Type$ $Property1Name$, $Property2Type$ $Property2Name$, $Property3Type$ $Property3Name$, $Property4Type$ $Property4Name$, $Property5Type$ $Property5Name$, $Property6Type$ $Property6Name$, $Property7Type$ $Property7Name$, $Property8Type$ $Property8Name$, $Property9Type$ $Property9Name$)
{
this.$Property1Name$ = $Property1Name$;
this.$Property2Name$ = $Property2Name$;
this.$Property3Name$ = $Property3Name$;
this.$Property4Name$ = $Property4Name$;
this.$Property5Name$ = $Property5Name$;
this.$Property6Name$ = $Property6Name$;
this.$Property7Name$ = $Property7Name$;
this.$Property8Name$ = $Property8Name$;
this.$Property9Name$ = $Property9Name$;
}
#endregion
#region Methods
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Property1Name$ == other.$Property1Name$ &&
  $Property2Name$ == other.$Property2Name$ &&
  $Property3Name$ == other.$Property3Name$ &&
  $Property4Name$ == other.$Property4Name$ &&
  $Property5Name$ == other.$Property5Name$ &&
  $Property6Name$ == other.$Property6Name$ &&
  $Property7Name$ == other.$Property7Name$ &&
  $Property8Name$ == other.$Property8Name$ &&
  $Property9Name$ == other.$Property9Name$ &&
  $ReadOnlyProperty1Name$ == other.$ReadOnlyProperty1Name$ &&
  $ReadOnlyProperty2Name$ == other.$ReadOnlyProperty2Name$ &&
  $ReadOnlyProperty3Name$ == other.$ReadOnlyProperty3Name$ &&
  $ReadOnlyProperty4Name$ == other.$ReadOnlyProperty4Name$ &&
  $ReadOnlyProperty5Name$ == other.$ReadOnlyProperty5Name$ &&
  $ReadOnlyProperty6Name$ == other.$ReadOnlyProperty6Name$ &&
  $ReadOnlyProperty7Name$ == other.$ReadOnlyProperty7Name$ &&
  $ReadOnlyProperty8Name$ == other.$ReadOnlyProperty8Name$ &&
  $ReadOnlyProperty9Name$ == other.$ReadOnlyProperty9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Property1Name$ = " + $Property1Name$);
sb.Append("$Property2Name$ = " + $Property2Name$);
sb.Append("$Property3Name$ = " + $Property3Name$);
sb.Append("$Property4Name$ = " + $Property4Name$);
sb.Append("$Property5Name$ = " + $Property5Name$);
sb.Append("$Property6Name$ = " + $Property6Name$);
sb.Append("$Property7Name$ = " + $Property7Name$);
sb.Append("$Property8Name$ = " + $Property8Name$);
sb.Append("$Property9Name$ = " + $Property9Name$);
sb.Append("$ReadOnlyProperty1Name$ = " + $ReadOnlyProperty1Name$ + ";");
sb.Append("$ReadOnlyProperty2Name$ = " + $ReadOnlyProperty2Name$ + ";");
sb.Append("$ReadOnlyProperty3Name$ = " + $ReadOnlyProperty3Name$ + ";");
sb.Append("$ReadOnlyProperty4Name$ = " + $ReadOnlyProperty4Name$ + ";");
sb.Append("$ReadOnlyProperty5Name$ = " + $ReadOnlyProperty5Name$ + ";");
sb.Append("$ReadOnlyProperty6Name$ = " + $ReadOnlyProperty6Name$ + ";");
sb.Append("$ReadOnlyProperty7Name$ = " + $ReadOnlyProperty7Name$ + ";");
sb.Append("$ReadOnlyProperty8Name$ = " + $ReadOnlyProperty8Name$ + ";");
sb.Append("$ReadOnlyProperty9Name$ = " + $ReadOnlyProperty9Name$);
return sb.ToString();
}
#endregion
}]]></Code>
  </Snippet>
</CodeSnippet></CodeSnippets>
