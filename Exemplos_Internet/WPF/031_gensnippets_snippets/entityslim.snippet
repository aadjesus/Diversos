<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity1slim</Title>
    <Shortcut>entity1slim</Shortcut>
    <Description>Strongly typed entity class with 1 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity1</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$)
{
this.$Prop1Name$ = $Prop1Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity2slim</Title>
    <Shortcut>entity2slim</Shortcut>
    <Description>Strongly typed entity class with 2 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity2</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity3slim</Title>
    <Shortcut>entity3slim</Shortcut>
    <Description>Strongly typed entity class with 3 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity3</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity4slim</Title>
    <Shortcut>entity4slim</Shortcut>
    <Description>Strongly typed entity class with 4 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity4</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity5slim</Title>
    <Shortcut>entity5slim</Shortcut>
    <Description>Strongly typed entity class with 5 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity5</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity6slim</Title>
    <Shortcut>entity6slim</Shortcut>
    <Description>Strongly typed entity class with 6 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity6</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity7slim</Title>
    <Shortcut>entity7slim</Shortcut>
    <Description>Strongly typed entity class with 7 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity7</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity8slim</Title>
    <Shortcut>entity8slim</Shortcut>
    <Description>Strongly typed entity class with 8 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity8</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity9slim</Title>
    <Shortcut>entity9slim</Shortcut>
    <Description>Strongly typed entity class with 9 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity9</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity10slim</Title>
    <Shortcut>entity10slim</Shortcut>
    <Description>Strongly typed entity class with 10 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity10</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity11slim</Title>
    <Shortcut>entity11slim</Shortcut>
    <Description>Strongly typed entity class with 11 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity11</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity12slim</Title>
    <Shortcut>entity12slim</Shortcut>
    <Description>Strongly typed entity class with 12 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity12</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity13slim</Title>
    <Shortcut>entity13slim</Shortcut>
    <Description>Strongly typed entity class with 13 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity13</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity14slim</Title>
    <Shortcut>entity14slim</Shortcut>
    <Description>Strongly typed entity class with 14 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity14</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity15slim</Title>
    <Shortcut>entity15slim</Shortcut>
    <Description>Strongly typed entity class with 15 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity15</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop15Name</ID>
        <ToolTip>Name of 15th property.</ToolTip>
        <Default>Prop15Name</Default>
      </Literal>
      <Literal>
        <ID>Prop15Type</ID>
        <ToolTip>Type of 15th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
private $Prop15Type$ _$Prop15Name$;
private readonly ReaderWriterLockSlim $Prop15Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop15Name$.
/// </summary>
/// <value>The $Prop15Name$.</value>
internal $Prop15Type$ $Prop15Name$
{
get
{
$Prop15Name$Lock.EnterReadLock();
$Prop15Type$ result = _$Prop15Name$;
$Prop15Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop15Name$Lock.EnterWriteLock();
_$Prop15Name$ = value;
$Prop15Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
/// <param name="$Prop15Name$">The $Prop15Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$, $Prop15Type$ $Prop15Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
this.$Prop15Name$ = $Prop15Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$ &&
  $Prop15Name$ == other.$Prop15Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$ + ";");
sb.Append("$Prop15Name$ = " + $Prop15Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity16slim</Title>
    <Shortcut>entity16slim</Shortcut>
    <Description>Strongly typed entity class with 16 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity16</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop15Name</ID>
        <ToolTip>Name of 15th property.</ToolTip>
        <Default>Prop15Name</Default>
      </Literal>
      <Literal>
        <ID>Prop15Type</ID>
        <ToolTip>Type of 15th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop16Name</ID>
        <ToolTip>Name of 16th property.</ToolTip>
        <Default>Prop16Name</Default>
      </Literal>
      <Literal>
        <ID>Prop16Type</ID>
        <ToolTip>Type of 16th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
private $Prop15Type$ _$Prop15Name$;
private readonly ReaderWriterLockSlim $Prop15Name$Lock = new ReaderWriterLockSlim();
private $Prop16Type$ _$Prop16Name$;
private readonly ReaderWriterLockSlim $Prop16Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop15Name$.
/// </summary>
/// <value>The $Prop15Name$.</value>
internal $Prop15Type$ $Prop15Name$
{
get
{
$Prop15Name$Lock.EnterReadLock();
$Prop15Type$ result = _$Prop15Name$;
$Prop15Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop15Name$Lock.EnterWriteLock();
_$Prop15Name$ = value;
$Prop15Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop16Name$.
/// </summary>
/// <value>The $Prop16Name$.</value>
internal $Prop16Type$ $Prop16Name$
{
get
{
$Prop16Name$Lock.EnterReadLock();
$Prop16Type$ result = _$Prop16Name$;
$Prop16Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop16Name$Lock.EnterWriteLock();
_$Prop16Name$ = value;
$Prop16Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
/// <param name="$Prop15Name$">The $Prop15Name$</param>
/// <param name="$Prop16Name$">The $Prop16Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$, $Prop15Type$ $Prop15Name$, $Prop16Type$ $Prop16Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
this.$Prop15Name$ = $Prop15Name$;
this.$Prop16Name$ = $Prop16Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$ &&
  $Prop15Name$ == other.$Prop15Name$ &&
  $Prop16Name$ == other.$Prop16Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$ + ";");
sb.Append("$Prop15Name$ = " + $Prop15Name$ + ";");
sb.Append("$Prop16Name$ = " + $Prop16Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity17slim</Title>
    <Shortcut>entity17slim</Shortcut>
    <Description>Strongly typed entity class with 17 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity17</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop15Name</ID>
        <ToolTip>Name of 15th property.</ToolTip>
        <Default>Prop15Name</Default>
      </Literal>
      <Literal>
        <ID>Prop15Type</ID>
        <ToolTip>Type of 15th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop16Name</ID>
        <ToolTip>Name of 16th property.</ToolTip>
        <Default>Prop16Name</Default>
      </Literal>
      <Literal>
        <ID>Prop16Type</ID>
        <ToolTip>Type of 16th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop17Name</ID>
        <ToolTip>Name of 17th property.</ToolTip>
        <Default>Prop17Name</Default>
      </Literal>
      <Literal>
        <ID>Prop17Type</ID>
        <ToolTip>Type of 17th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
private $Prop15Type$ _$Prop15Name$;
private readonly ReaderWriterLockSlim $Prop15Name$Lock = new ReaderWriterLockSlim();
private $Prop16Type$ _$Prop16Name$;
private readonly ReaderWriterLockSlim $Prop16Name$Lock = new ReaderWriterLockSlim();
private $Prop17Type$ _$Prop17Name$;
private readonly ReaderWriterLockSlim $Prop17Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop15Name$.
/// </summary>
/// <value>The $Prop15Name$.</value>
internal $Prop15Type$ $Prop15Name$
{
get
{
$Prop15Name$Lock.EnterReadLock();
$Prop15Type$ result = _$Prop15Name$;
$Prop15Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop15Name$Lock.EnterWriteLock();
_$Prop15Name$ = value;
$Prop15Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop16Name$.
/// </summary>
/// <value>The $Prop16Name$.</value>
internal $Prop16Type$ $Prop16Name$
{
get
{
$Prop16Name$Lock.EnterReadLock();
$Prop16Type$ result = _$Prop16Name$;
$Prop16Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop16Name$Lock.EnterWriteLock();
_$Prop16Name$ = value;
$Prop16Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop17Name$.
/// </summary>
/// <value>The $Prop17Name$.</value>
internal $Prop17Type$ $Prop17Name$
{
get
{
$Prop17Name$Lock.EnterReadLock();
$Prop17Type$ result = _$Prop17Name$;
$Prop17Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop17Name$Lock.EnterWriteLock();
_$Prop17Name$ = value;
$Prop17Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
/// <param name="$Prop15Name$">The $Prop15Name$</param>
/// <param name="$Prop16Name$">The $Prop16Name$</param>
/// <param name="$Prop17Name$">The $Prop17Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$, $Prop15Type$ $Prop15Name$, $Prop16Type$ $Prop16Name$, $Prop17Type$ $Prop17Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
this.$Prop15Name$ = $Prop15Name$;
this.$Prop16Name$ = $Prop16Name$;
this.$Prop17Name$ = $Prop17Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$ &&
  $Prop15Name$ == other.$Prop15Name$ &&
  $Prop16Name$ == other.$Prop16Name$ &&
  $Prop17Name$ == other.$Prop17Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$ + ";");
sb.Append("$Prop15Name$ = " + $Prop15Name$ + ";");
sb.Append("$Prop16Name$ = " + $Prop16Name$ + ";");
sb.Append("$Prop17Name$ = " + $Prop17Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity18slim</Title>
    <Shortcut>entity18slim</Shortcut>
    <Description>Strongly typed entity class with 18 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity18</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop15Name</ID>
        <ToolTip>Name of 15th property.</ToolTip>
        <Default>Prop15Name</Default>
      </Literal>
      <Literal>
        <ID>Prop15Type</ID>
        <ToolTip>Type of 15th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop16Name</ID>
        <ToolTip>Name of 16th property.</ToolTip>
        <Default>Prop16Name</Default>
      </Literal>
      <Literal>
        <ID>Prop16Type</ID>
        <ToolTip>Type of 16th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop17Name</ID>
        <ToolTip>Name of 17th property.</ToolTip>
        <Default>Prop17Name</Default>
      </Literal>
      <Literal>
        <ID>Prop17Type</ID>
        <ToolTip>Type of 17th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop18Name</ID>
        <ToolTip>Name of 18th property.</ToolTip>
        <Default>Prop18Name</Default>
      </Literal>
      <Literal>
        <ID>Prop18Type</ID>
        <ToolTip>Type of 18th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
private $Prop15Type$ _$Prop15Name$;
private readonly ReaderWriterLockSlim $Prop15Name$Lock = new ReaderWriterLockSlim();
private $Prop16Type$ _$Prop16Name$;
private readonly ReaderWriterLockSlim $Prop16Name$Lock = new ReaderWriterLockSlim();
private $Prop17Type$ _$Prop17Name$;
private readonly ReaderWriterLockSlim $Prop17Name$Lock = new ReaderWriterLockSlim();
private $Prop18Type$ _$Prop18Name$;
private readonly ReaderWriterLockSlim $Prop18Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop15Name$.
/// </summary>
/// <value>The $Prop15Name$.</value>
internal $Prop15Type$ $Prop15Name$
{
get
{
$Prop15Name$Lock.EnterReadLock();
$Prop15Type$ result = _$Prop15Name$;
$Prop15Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop15Name$Lock.EnterWriteLock();
_$Prop15Name$ = value;
$Prop15Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop16Name$.
/// </summary>
/// <value>The $Prop16Name$.</value>
internal $Prop16Type$ $Prop16Name$
{
get
{
$Prop16Name$Lock.EnterReadLock();
$Prop16Type$ result = _$Prop16Name$;
$Prop16Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop16Name$Lock.EnterWriteLock();
_$Prop16Name$ = value;
$Prop16Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop17Name$.
/// </summary>
/// <value>The $Prop17Name$.</value>
internal $Prop17Type$ $Prop17Name$
{
get
{
$Prop17Name$Lock.EnterReadLock();
$Prop17Type$ result = _$Prop17Name$;
$Prop17Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop17Name$Lock.EnterWriteLock();
_$Prop17Name$ = value;
$Prop17Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop18Name$.
/// </summary>
/// <value>The $Prop18Name$.</value>
internal $Prop18Type$ $Prop18Name$
{
get
{
$Prop18Name$Lock.EnterReadLock();
$Prop18Type$ result = _$Prop18Name$;
$Prop18Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop18Name$Lock.EnterWriteLock();
_$Prop18Name$ = value;
$Prop18Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
/// <param name="$Prop15Name$">The $Prop15Name$</param>
/// <param name="$Prop16Name$">The $Prop16Name$</param>
/// <param name="$Prop17Name$">The $Prop17Name$</param>
/// <param name="$Prop18Name$">The $Prop18Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$, $Prop15Type$ $Prop15Name$, $Prop16Type$ $Prop16Name$, $Prop17Type$ $Prop17Name$, $Prop18Type$ $Prop18Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
this.$Prop15Name$ = $Prop15Name$;
this.$Prop16Name$ = $Prop16Name$;
this.$Prop17Name$ = $Prop17Name$;
this.$Prop18Name$ = $Prop18Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$ &&
  $Prop15Name$ == other.$Prop15Name$ &&
  $Prop16Name$ == other.$Prop16Name$ &&
  $Prop17Name$ == other.$Prop17Name$ &&
  $Prop18Name$ == other.$Prop18Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$ + ";");
sb.Append("$Prop15Name$ = " + $Prop15Name$ + ";");
sb.Append("$Prop16Name$ = " + $Prop16Name$ + ";");
sb.Append("$Prop17Name$ = " + $Prop17Name$ + ";");
sb.Append("$Prop18Name$ = " + $Prop18Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity19slim</Title>
    <Shortcut>entity19slim</Shortcut>
    <Description>Strongly typed entity class with 19 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity19</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop15Name</ID>
        <ToolTip>Name of 15th property.</ToolTip>
        <Default>Prop15Name</Default>
      </Literal>
      <Literal>
        <ID>Prop15Type</ID>
        <ToolTip>Type of 15th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop16Name</ID>
        <ToolTip>Name of 16th property.</ToolTip>
        <Default>Prop16Name</Default>
      </Literal>
      <Literal>
        <ID>Prop16Type</ID>
        <ToolTip>Type of 16th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop17Name</ID>
        <ToolTip>Name of 17th property.</ToolTip>
        <Default>Prop17Name</Default>
      </Literal>
      <Literal>
        <ID>Prop17Type</ID>
        <ToolTip>Type of 17th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop18Name</ID>
        <ToolTip>Name of 18th property.</ToolTip>
        <Default>Prop18Name</Default>
      </Literal>
      <Literal>
        <ID>Prop18Type</ID>
        <ToolTip>Type of 18th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop19Name</ID>
        <ToolTip>Name of 19th property.</ToolTip>
        <Default>Prop19Name</Default>
      </Literal>
      <Literal>
        <ID>Prop19Type</ID>
        <ToolTip>Type of 19th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
private $Prop15Type$ _$Prop15Name$;
private readonly ReaderWriterLockSlim $Prop15Name$Lock = new ReaderWriterLockSlim();
private $Prop16Type$ _$Prop16Name$;
private readonly ReaderWriterLockSlim $Prop16Name$Lock = new ReaderWriterLockSlim();
private $Prop17Type$ _$Prop17Name$;
private readonly ReaderWriterLockSlim $Prop17Name$Lock = new ReaderWriterLockSlim();
private $Prop18Type$ _$Prop18Name$;
private readonly ReaderWriterLockSlim $Prop18Name$Lock = new ReaderWriterLockSlim();
private $Prop19Type$ _$Prop19Name$;
private readonly ReaderWriterLockSlim $Prop19Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop15Name$.
/// </summary>
/// <value>The $Prop15Name$.</value>
internal $Prop15Type$ $Prop15Name$
{
get
{
$Prop15Name$Lock.EnterReadLock();
$Prop15Type$ result = _$Prop15Name$;
$Prop15Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop15Name$Lock.EnterWriteLock();
_$Prop15Name$ = value;
$Prop15Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop16Name$.
/// </summary>
/// <value>The $Prop16Name$.</value>
internal $Prop16Type$ $Prop16Name$
{
get
{
$Prop16Name$Lock.EnterReadLock();
$Prop16Type$ result = _$Prop16Name$;
$Prop16Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop16Name$Lock.EnterWriteLock();
_$Prop16Name$ = value;
$Prop16Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop17Name$.
/// </summary>
/// <value>The $Prop17Name$.</value>
internal $Prop17Type$ $Prop17Name$
{
get
{
$Prop17Name$Lock.EnterReadLock();
$Prop17Type$ result = _$Prop17Name$;
$Prop17Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop17Name$Lock.EnterWriteLock();
_$Prop17Name$ = value;
$Prop17Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop18Name$.
/// </summary>
/// <value>The $Prop18Name$.</value>
internal $Prop18Type$ $Prop18Name$
{
get
{
$Prop18Name$Lock.EnterReadLock();
$Prop18Type$ result = _$Prop18Name$;
$Prop18Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop18Name$Lock.EnterWriteLock();
_$Prop18Name$ = value;
$Prop18Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop19Name$.
/// </summary>
/// <value>The $Prop19Name$.</value>
internal $Prop19Type$ $Prop19Name$
{
get
{
$Prop19Name$Lock.EnterReadLock();
$Prop19Type$ result = _$Prop19Name$;
$Prop19Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop19Name$Lock.EnterWriteLock();
_$Prop19Name$ = value;
$Prop19Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
/// <param name="$Prop15Name$">The $Prop15Name$</param>
/// <param name="$Prop16Name$">The $Prop16Name$</param>
/// <param name="$Prop17Name$">The $Prop17Name$</param>
/// <param name="$Prop18Name$">The $Prop18Name$</param>
/// <param name="$Prop19Name$">The $Prop19Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$, $Prop15Type$ $Prop15Name$, $Prop16Type$ $Prop16Name$, $Prop17Type$ $Prop17Name$, $Prop18Type$ $Prop18Name$, $Prop19Type$ $Prop19Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
this.$Prop15Name$ = $Prop15Name$;
this.$Prop16Name$ = $Prop16Name$;
this.$Prop17Name$ = $Prop17Name$;
this.$Prop18Name$ = $Prop18Name$;
this.$Prop19Name$ = $Prop19Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$ &&
  $Prop15Name$ == other.$Prop15Name$ &&
  $Prop16Name$ == other.$Prop16Name$ &&
  $Prop17Name$ == other.$Prop17Name$ &&
  $Prop18Name$ == other.$Prop18Name$ &&
  $Prop19Name$ == other.$Prop19Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$ + ";");
sb.Append("$Prop15Name$ = " + $Prop15Name$ + ";");
sb.Append("$Prop16Name$ = " + $Prop16Name$ + ";");
sb.Append("$Prop17Name$ = " + $Prop17Name$ + ";");
sb.Append("$Prop18Name$ = " + $Prop18Name$ + ";");
sb.Append("$Prop19Name$ = " + $Prop19Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet><CodeSnippet Format="1.0.0">
  <Header>
    <Title>entity20slim</Title>
    <Shortcut>entity20slim</Shortcut>
    <Description>Strongly typed entity class with 20 properties controlled via ReaderWriterLockSlim.</Description>
    <Author>C# Snippets Release 5.0 -- Copyright (C) Dmitri Nesteruk, 2008 -- see http://www.codeplex.com/csn for latest releases</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <ToolTip>Name of this tuple class.</ToolTip>
        <Default>Entity20</Default>
      </Literal>
      <Literal>
        <ID>Prop1Name</ID>
        <ToolTip>Name of 1st property.</ToolTip>
        <Default>Prop1Name</Default>
      </Literal>
      <Literal>
        <ID>Prop1Type</ID>
        <ToolTip>Type of 1st property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop2Name</ID>
        <ToolTip>Name of 2nd property.</ToolTip>
        <Default>Prop2Name</Default>
      </Literal>
      <Literal>
        <ID>Prop2Type</ID>
        <ToolTip>Type of 2nd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop3Name</ID>
        <ToolTip>Name of 3rd property.</ToolTip>
        <Default>Prop3Name</Default>
      </Literal>
      <Literal>
        <ID>Prop3Type</ID>
        <ToolTip>Type of 3rd property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop4Name</ID>
        <ToolTip>Name of 4th property.</ToolTip>
        <Default>Prop4Name</Default>
      </Literal>
      <Literal>
        <ID>Prop4Type</ID>
        <ToolTip>Type of 4th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop5Name</ID>
        <ToolTip>Name of 5th property.</ToolTip>
        <Default>Prop5Name</Default>
      </Literal>
      <Literal>
        <ID>Prop5Type</ID>
        <ToolTip>Type of 5th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop6Name</ID>
        <ToolTip>Name of 6th property.</ToolTip>
        <Default>Prop6Name</Default>
      </Literal>
      <Literal>
        <ID>Prop6Type</ID>
        <ToolTip>Type of 6th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop7Name</ID>
        <ToolTip>Name of 7th property.</ToolTip>
        <Default>Prop7Name</Default>
      </Literal>
      <Literal>
        <ID>Prop7Type</ID>
        <ToolTip>Type of 7th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop8Name</ID>
        <ToolTip>Name of 8th property.</ToolTip>
        <Default>Prop8Name</Default>
      </Literal>
      <Literal>
        <ID>Prop8Type</ID>
        <ToolTip>Type of 8th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop9Name</ID>
        <ToolTip>Name of 9th property.</ToolTip>
        <Default>Prop9Name</Default>
      </Literal>
      <Literal>
        <ID>Prop9Type</ID>
        <ToolTip>Type of 9th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop10Name</ID>
        <ToolTip>Name of 10th property.</ToolTip>
        <Default>Prop10Name</Default>
      </Literal>
      <Literal>
        <ID>Prop10Type</ID>
        <ToolTip>Type of 10th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop11Name</ID>
        <ToolTip>Name of 11th property.</ToolTip>
        <Default>Prop11Name</Default>
      </Literal>
      <Literal>
        <ID>Prop11Type</ID>
        <ToolTip>Type of 11th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop12Name</ID>
        <ToolTip>Name of 12th property.</ToolTip>
        <Default>Prop12Name</Default>
      </Literal>
      <Literal>
        <ID>Prop12Type</ID>
        <ToolTip>Type of 12th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop13Name</ID>
        <ToolTip>Name of 13th property.</ToolTip>
        <Default>Prop13Name</Default>
      </Literal>
      <Literal>
        <ID>Prop13Type</ID>
        <ToolTip>Type of 13th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop14Name</ID>
        <ToolTip>Name of 14th property.</ToolTip>
        <Default>Prop14Name</Default>
      </Literal>
      <Literal>
        <ID>Prop14Type</ID>
        <ToolTip>Type of 14th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop15Name</ID>
        <ToolTip>Name of 15th property.</ToolTip>
        <Default>Prop15Name</Default>
      </Literal>
      <Literal>
        <ID>Prop15Type</ID>
        <ToolTip>Type of 15th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop16Name</ID>
        <ToolTip>Name of 16th property.</ToolTip>
        <Default>Prop16Name</Default>
      </Literal>
      <Literal>
        <ID>Prop16Type</ID>
        <ToolTip>Type of 16th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop17Name</ID>
        <ToolTip>Name of 17th property.</ToolTip>
        <Default>Prop17Name</Default>
      </Literal>
      <Literal>
        <ID>Prop17Type</ID>
        <ToolTip>Type of 17th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop18Name</ID>
        <ToolTip>Name of 18th property.</ToolTip>
        <Default>Prop18Name</Default>
      </Literal>
      <Literal>
        <ID>Prop18Type</ID>
        <ToolTip>Type of 18th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop19Name</ID>
        <ToolTip>Name of 19th property.</ToolTip>
        <Default>Prop19Name</Default>
      </Literal>
      <Literal>
        <ID>Prop19Type</ID>
        <ToolTip>Type of 19th property.</ToolTip>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>Prop20Name</ID>
        <ToolTip>Name of 20th property.</ToolTip>
        <Default>Prop20Name</Default>
      </Literal>
      <Literal>
        <ID>Prop20Type</ID>
        <ToolTip>Type of 20th property.</ToolTip>
        <Default>int</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[/// <summary>
/// $ClassName$.
/// </summary>
[Serializable]
internal class $ClassName$ : IEquatable<$ClassName$>
{
#region Fields
private $Prop1Type$ _$Prop1Name$;
private readonly ReaderWriterLockSlim $Prop1Name$Lock = new ReaderWriterLockSlim();
private $Prop2Type$ _$Prop2Name$;
private readonly ReaderWriterLockSlim $Prop2Name$Lock = new ReaderWriterLockSlim();
private $Prop3Type$ _$Prop3Name$;
private readonly ReaderWriterLockSlim $Prop3Name$Lock = new ReaderWriterLockSlim();
private $Prop4Type$ _$Prop4Name$;
private readonly ReaderWriterLockSlim $Prop4Name$Lock = new ReaderWriterLockSlim();
private $Prop5Type$ _$Prop5Name$;
private readonly ReaderWriterLockSlim $Prop5Name$Lock = new ReaderWriterLockSlim();
private $Prop6Type$ _$Prop6Name$;
private readonly ReaderWriterLockSlim $Prop6Name$Lock = new ReaderWriterLockSlim();
private $Prop7Type$ _$Prop7Name$;
private readonly ReaderWriterLockSlim $Prop7Name$Lock = new ReaderWriterLockSlim();
private $Prop8Type$ _$Prop8Name$;
private readonly ReaderWriterLockSlim $Prop8Name$Lock = new ReaderWriterLockSlim();
private $Prop9Type$ _$Prop9Name$;
private readonly ReaderWriterLockSlim $Prop9Name$Lock = new ReaderWriterLockSlim();
private $Prop10Type$ _$Prop10Name$;
private readonly ReaderWriterLockSlim $Prop10Name$Lock = new ReaderWriterLockSlim();
private $Prop11Type$ _$Prop11Name$;
private readonly ReaderWriterLockSlim $Prop11Name$Lock = new ReaderWriterLockSlim();
private $Prop12Type$ _$Prop12Name$;
private readonly ReaderWriterLockSlim $Prop12Name$Lock = new ReaderWriterLockSlim();
private $Prop13Type$ _$Prop13Name$;
private readonly ReaderWriterLockSlim $Prop13Name$Lock = new ReaderWriterLockSlim();
private $Prop14Type$ _$Prop14Name$;
private readonly ReaderWriterLockSlim $Prop14Name$Lock = new ReaderWriterLockSlim();
private $Prop15Type$ _$Prop15Name$;
private readonly ReaderWriterLockSlim $Prop15Name$Lock = new ReaderWriterLockSlim();
private $Prop16Type$ _$Prop16Name$;
private readonly ReaderWriterLockSlim $Prop16Name$Lock = new ReaderWriterLockSlim();
private $Prop17Type$ _$Prop17Name$;
private readonly ReaderWriterLockSlim $Prop17Name$Lock = new ReaderWriterLockSlim();
private $Prop18Type$ _$Prop18Name$;
private readonly ReaderWriterLockSlim $Prop18Name$Lock = new ReaderWriterLockSlim();
private $Prop19Type$ _$Prop19Name$;
private readonly ReaderWriterLockSlim $Prop19Name$Lock = new ReaderWriterLockSlim();
private $Prop20Type$ _$Prop20Name$;
private readonly ReaderWriterLockSlim $Prop20Name$Lock = new ReaderWriterLockSlim();
#endregion
#region Properties
/// <summary>
/// Gets or sets the $Prop1Name$.
/// </summary>
/// <value>The $Prop1Name$.</value>
internal $Prop1Type$ $Prop1Name$
{
get
{
$Prop1Name$Lock.EnterReadLock();
$Prop1Type$ result = _$Prop1Name$;
$Prop1Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop1Name$Lock.EnterWriteLock();
_$Prop1Name$ = value;
$Prop1Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop2Name$.
/// </summary>
/// <value>The $Prop2Name$.</value>
internal $Prop2Type$ $Prop2Name$
{
get
{
$Prop2Name$Lock.EnterReadLock();
$Prop2Type$ result = _$Prop2Name$;
$Prop2Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop2Name$Lock.EnterWriteLock();
_$Prop2Name$ = value;
$Prop2Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop3Name$.
/// </summary>
/// <value>The $Prop3Name$.</value>
internal $Prop3Type$ $Prop3Name$
{
get
{
$Prop3Name$Lock.EnterReadLock();
$Prop3Type$ result = _$Prop3Name$;
$Prop3Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop3Name$Lock.EnterWriteLock();
_$Prop3Name$ = value;
$Prop3Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop4Name$.
/// </summary>
/// <value>The $Prop4Name$.</value>
internal $Prop4Type$ $Prop4Name$
{
get
{
$Prop4Name$Lock.EnterReadLock();
$Prop4Type$ result = _$Prop4Name$;
$Prop4Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop4Name$Lock.EnterWriteLock();
_$Prop4Name$ = value;
$Prop4Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop5Name$.
/// </summary>
/// <value>The $Prop5Name$.</value>
internal $Prop5Type$ $Prop5Name$
{
get
{
$Prop5Name$Lock.EnterReadLock();
$Prop5Type$ result = _$Prop5Name$;
$Prop5Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop5Name$Lock.EnterWriteLock();
_$Prop5Name$ = value;
$Prop5Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop6Name$.
/// </summary>
/// <value>The $Prop6Name$.</value>
internal $Prop6Type$ $Prop6Name$
{
get
{
$Prop6Name$Lock.EnterReadLock();
$Prop6Type$ result = _$Prop6Name$;
$Prop6Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop6Name$Lock.EnterWriteLock();
_$Prop6Name$ = value;
$Prop6Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop7Name$.
/// </summary>
/// <value>The $Prop7Name$.</value>
internal $Prop7Type$ $Prop7Name$
{
get
{
$Prop7Name$Lock.EnterReadLock();
$Prop7Type$ result = _$Prop7Name$;
$Prop7Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop7Name$Lock.EnterWriteLock();
_$Prop7Name$ = value;
$Prop7Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop8Name$.
/// </summary>
/// <value>The $Prop8Name$.</value>
internal $Prop8Type$ $Prop8Name$
{
get
{
$Prop8Name$Lock.EnterReadLock();
$Prop8Type$ result = _$Prop8Name$;
$Prop8Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop8Name$Lock.EnterWriteLock();
_$Prop8Name$ = value;
$Prop8Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop9Name$.
/// </summary>
/// <value>The $Prop9Name$.</value>
internal $Prop9Type$ $Prop9Name$
{
get
{
$Prop9Name$Lock.EnterReadLock();
$Prop9Type$ result = _$Prop9Name$;
$Prop9Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop9Name$Lock.EnterWriteLock();
_$Prop9Name$ = value;
$Prop9Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop10Name$.
/// </summary>
/// <value>The $Prop10Name$.</value>
internal $Prop10Type$ $Prop10Name$
{
get
{
$Prop10Name$Lock.EnterReadLock();
$Prop10Type$ result = _$Prop10Name$;
$Prop10Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop10Name$Lock.EnterWriteLock();
_$Prop10Name$ = value;
$Prop10Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop11Name$.
/// </summary>
/// <value>The $Prop11Name$.</value>
internal $Prop11Type$ $Prop11Name$
{
get
{
$Prop11Name$Lock.EnterReadLock();
$Prop11Type$ result = _$Prop11Name$;
$Prop11Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop11Name$Lock.EnterWriteLock();
_$Prop11Name$ = value;
$Prop11Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop12Name$.
/// </summary>
/// <value>The $Prop12Name$.</value>
internal $Prop12Type$ $Prop12Name$
{
get
{
$Prop12Name$Lock.EnterReadLock();
$Prop12Type$ result = _$Prop12Name$;
$Prop12Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop12Name$Lock.EnterWriteLock();
_$Prop12Name$ = value;
$Prop12Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop13Name$.
/// </summary>
/// <value>The $Prop13Name$.</value>
internal $Prop13Type$ $Prop13Name$
{
get
{
$Prop13Name$Lock.EnterReadLock();
$Prop13Type$ result = _$Prop13Name$;
$Prop13Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop13Name$Lock.EnterWriteLock();
_$Prop13Name$ = value;
$Prop13Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop14Name$.
/// </summary>
/// <value>The $Prop14Name$.</value>
internal $Prop14Type$ $Prop14Name$
{
get
{
$Prop14Name$Lock.EnterReadLock();
$Prop14Type$ result = _$Prop14Name$;
$Prop14Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop14Name$Lock.EnterWriteLock();
_$Prop14Name$ = value;
$Prop14Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop15Name$.
/// </summary>
/// <value>The $Prop15Name$.</value>
internal $Prop15Type$ $Prop15Name$
{
get
{
$Prop15Name$Lock.EnterReadLock();
$Prop15Type$ result = _$Prop15Name$;
$Prop15Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop15Name$Lock.EnterWriteLock();
_$Prop15Name$ = value;
$Prop15Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop16Name$.
/// </summary>
/// <value>The $Prop16Name$.</value>
internal $Prop16Type$ $Prop16Name$
{
get
{
$Prop16Name$Lock.EnterReadLock();
$Prop16Type$ result = _$Prop16Name$;
$Prop16Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop16Name$Lock.EnterWriteLock();
_$Prop16Name$ = value;
$Prop16Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop17Name$.
/// </summary>
/// <value>The $Prop17Name$.</value>
internal $Prop17Type$ $Prop17Name$
{
get
{
$Prop17Name$Lock.EnterReadLock();
$Prop17Type$ result = _$Prop17Name$;
$Prop17Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop17Name$Lock.EnterWriteLock();
_$Prop17Name$ = value;
$Prop17Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop18Name$.
/// </summary>
/// <value>The $Prop18Name$.</value>
internal $Prop18Type$ $Prop18Name$
{
get
{
$Prop18Name$Lock.EnterReadLock();
$Prop18Type$ result = _$Prop18Name$;
$Prop18Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop18Name$Lock.EnterWriteLock();
_$Prop18Name$ = value;
$Prop18Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop19Name$.
/// </summary>
/// <value>The $Prop19Name$.</value>
internal $Prop19Type$ $Prop19Name$
{
get
{
$Prop19Name$Lock.EnterReadLock();
$Prop19Type$ result = _$Prop19Name$;
$Prop19Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop19Name$Lock.EnterWriteLock();
_$Prop19Name$ = value;
$Prop19Name$Lock.ExitWriteLock();
}
}
/// <summary>
/// Gets or sets the $Prop20Name$.
/// </summary>
/// <value>The $Prop20Name$.</value>
internal $Prop20Type$ $Prop20Name$
{
get
{
$Prop20Name$Lock.EnterReadLock();
$Prop20Type$ result = _$Prop20Name$;
$Prop20Name$Lock.ExitReadLock();
return result;
}
set
{
$Prop20Name$Lock.EnterWriteLock();
_$Prop20Name$ = value;
$Prop20Name$Lock.ExitWriteLock();
}
}
#endregion
#region Constructors
/// <summary>
/// Initializes a new instance of the <see cref="$ClassName$"/> class.
/// </summary>
internal $ClassName$() {}
/// <summary>
/// Initializes a new fully specified instance of the <see cref="$ClassName$"/> class.
/// </summary>
/// <param name="$Prop1Name$">The $Prop1Name$</param>
/// <param name="$Prop2Name$">The $Prop2Name$</param>
/// <param name="$Prop3Name$">The $Prop3Name$</param>
/// <param name="$Prop4Name$">The $Prop4Name$</param>
/// <param name="$Prop5Name$">The $Prop5Name$</param>
/// <param name="$Prop6Name$">The $Prop6Name$</param>
/// <param name="$Prop7Name$">The $Prop7Name$</param>
/// <param name="$Prop8Name$">The $Prop8Name$</param>
/// <param name="$Prop9Name$">The $Prop9Name$</param>
/// <param name="$Prop10Name$">The $Prop10Name$</param>
/// <param name="$Prop11Name$">The $Prop11Name$</param>
/// <param name="$Prop12Name$">The $Prop12Name$</param>
/// <param name="$Prop13Name$">The $Prop13Name$</param>
/// <param name="$Prop14Name$">The $Prop14Name$</param>
/// <param name="$Prop15Name$">The $Prop15Name$</param>
/// <param name="$Prop16Name$">The $Prop16Name$</param>
/// <param name="$Prop17Name$">The $Prop17Name$</param>
/// <param name="$Prop18Name$">The $Prop18Name$</param>
/// <param name="$Prop19Name$">The $Prop19Name$</param>
/// <param name="$Prop20Name$">The $Prop20Name$</param>
internal $ClassName$($Prop1Type$ $Prop1Name$, $Prop2Type$ $Prop2Name$, $Prop3Type$ $Prop3Name$, $Prop4Type$ $Prop4Name$, $Prop5Type$ $Prop5Name$, $Prop6Type$ $Prop6Name$, $Prop7Type$ $Prop7Name$, $Prop8Type$ $Prop8Name$, $Prop9Type$ $Prop9Name$, $Prop10Type$ $Prop10Name$, $Prop11Type$ $Prop11Name$, $Prop12Type$ $Prop12Name$, $Prop13Type$ $Prop13Name$, $Prop14Type$ $Prop14Name$, $Prop15Type$ $Prop15Name$, $Prop16Type$ $Prop16Name$, $Prop17Type$ $Prop17Name$, $Prop18Type$ $Prop18Name$, $Prop19Type$ $Prop19Name$, $Prop20Type$ $Prop20Name$)
{
this.$Prop1Name$ = $Prop1Name$;
this.$Prop2Name$ = $Prop2Name$;
this.$Prop3Name$ = $Prop3Name$;
this.$Prop4Name$ = $Prop4Name$;
this.$Prop5Name$ = $Prop5Name$;
this.$Prop6Name$ = $Prop6Name$;
this.$Prop7Name$ = $Prop7Name$;
this.$Prop8Name$ = $Prop8Name$;
this.$Prop9Name$ = $Prop9Name$;
this.$Prop10Name$ = $Prop10Name$;
this.$Prop11Name$ = $Prop11Name$;
this.$Prop12Name$ = $Prop12Name$;
this.$Prop13Name$ = $Prop13Name$;
this.$Prop14Name$ = $Prop14Name$;
this.$Prop15Name$ = $Prop15Name$;
this.$Prop16Name$ = $Prop16Name$;
this.$Prop17Name$ = $Prop17Name$;
this.$Prop18Name$ = $Prop18Name$;
this.$Prop19Name$ = $Prop19Name$;
this.$Prop20Name$ = $Prop20Name$;
}
#endregion
#region Methods
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
public override bool Equals(object obj)
{
  $ClassName$ other = obj as $ClassName$;
  if (other != null)
    return Equals(other);
  return false;
}
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
public bool Equals($ClassName$ other)
{
if (ReferenceEquals(null, other)) return false;
if (ReferenceEquals(this, other)) return true;
return
  $Prop1Name$ == other.$Prop1Name$ &&
  $Prop2Name$ == other.$Prop2Name$ &&
  $Prop3Name$ == other.$Prop3Name$ &&
  $Prop4Name$ == other.$Prop4Name$ &&
  $Prop5Name$ == other.$Prop5Name$ &&
  $Prop6Name$ == other.$Prop6Name$ &&
  $Prop7Name$ == other.$Prop7Name$ &&
  $Prop8Name$ == other.$Prop8Name$ &&
  $Prop9Name$ == other.$Prop9Name$ &&
  $Prop10Name$ == other.$Prop10Name$ &&
  $Prop11Name$ == other.$Prop11Name$ &&
  $Prop12Name$ == other.$Prop12Name$ &&
  $Prop13Name$ == other.$Prop13Name$ &&
  $Prop14Name$ == other.$Prop14Name$ &&
  $Prop15Name$ == other.$Prop15Name$ &&
  $Prop16Name$ == other.$Prop16Name$ &&
  $Prop17Name$ == other.$Prop17Name$ &&
  $Prop18Name$ == other.$Prop18Name$ &&
  $Prop19Name$ == other.$Prop19Name$ &&
  $Prop20Name$ == other.$Prop20Name$;
}
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
/// </returns>
public override string ToString()
{
StringBuilder sb = new StringBuilder();
sb.Append("$Prop1Name$ = " + $Prop1Name$ + ";");
sb.Append("$Prop2Name$ = " + $Prop2Name$ + ";");
sb.Append("$Prop3Name$ = " + $Prop3Name$ + ";");
sb.Append("$Prop4Name$ = " + $Prop4Name$ + ";");
sb.Append("$Prop5Name$ = " + $Prop5Name$ + ";");
sb.Append("$Prop6Name$ = " + $Prop6Name$ + ";");
sb.Append("$Prop7Name$ = " + $Prop7Name$ + ";");
sb.Append("$Prop8Name$ = " + $Prop8Name$ + ";");
sb.Append("$Prop9Name$ = " + $Prop9Name$ + ";");
sb.Append("$Prop10Name$ = " + $Prop10Name$ + ";");
sb.Append("$Prop11Name$ = " + $Prop11Name$ + ";");
sb.Append("$Prop12Name$ = " + $Prop12Name$ + ";");
sb.Append("$Prop13Name$ = " + $Prop13Name$ + ";");
sb.Append("$Prop14Name$ = " + $Prop14Name$ + ";");
sb.Append("$Prop15Name$ = " + $Prop15Name$ + ";");
sb.Append("$Prop16Name$ = " + $Prop16Name$ + ";");
sb.Append("$Prop17Name$ = " + $Prop17Name$ + ";");
sb.Append("$Prop18Name$ = " + $Prop18Name$ + ";");
sb.Append("$Prop19Name$ = " + $Prop19Name$ + ";");
sb.Append("$Prop20Name$ = " + $Prop20Name$);
return sb.ToString();
}
#endregion
}
]]></Code>
  </Snippet>
</CodeSnippet></CodeSnippets>
