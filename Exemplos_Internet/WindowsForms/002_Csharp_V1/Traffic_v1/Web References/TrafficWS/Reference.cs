//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4200.
// 
#pragma warning disable 1591

namespace Traffic_v1.TrafficWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TrafficSoap", Namespace="http://webservices.maplink2.com.br")]
    public partial class Traffic : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorridorOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExcerptOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorridorsCongestedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExcerptsCongestedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCongestedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Traffic() {
            this.Url = global::Traffic_v1.Properties.Settings.Default.Traffic_v1_TrafficWS_Traffic;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getInfoCompletedEventHandler getInfoCompleted;
        
        /// <remarks/>
        public event getCorridorCompletedEventHandler getCorridorCompleted;
        
        /// <remarks/>
        public event getExcerptCompletedEventHandler getExcerptCompleted;
        
        /// <remarks/>
        public event getCorridorsCongestedCompletedEventHandler getCorridorsCongestedCompleted;
        
        /// <remarks/>
        public event getExcerptsCongestedCompletedEventHandler getExcerptsCongestedCompleted;
        
        /// <remarks/>
        public event getAllCongestedCompletedEventHandler getAllCongestedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getInfo", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrafficInfo getInfo(City city, ResultRange resultRange, string token) {
            object[] results = this.Invoke("getInfo", new object[] {
                        city,
                        resultRange,
                        token});
            return ((TrafficInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getInfoAsync(City city, ResultRange resultRange, string token) {
            this.getInfoAsync(city, resultRange, token, null);
        }
        
        /// <remarks/>
        public void getInfoAsync(City city, ResultRange resultRange, string token, object userState) {
            if ((this.getInfoOperationCompleted == null)) {
                this.getInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInfoOperationCompleted);
            }
            this.InvokeAsync("getInfo", new object[] {
                        city,
                        resultRange,
                        token}, this.getInfoOperationCompleted, userState);
        }
        
        private void OngetInfoOperationCompleted(object arg) {
            if ((this.getInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInfoCompleted(this, new getInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getCorridor", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CorridorInfo getCorridor(City city, ResultRange resultRange, string token) {
            object[] results = this.Invoke("getCorridor", new object[] {
                        city,
                        resultRange,
                        token});
            return ((CorridorInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getCorridorAsync(City city, ResultRange resultRange, string token) {
            this.getCorridorAsync(city, resultRange, token, null);
        }
        
        /// <remarks/>
        public void getCorridorAsync(City city, ResultRange resultRange, string token, object userState) {
            if ((this.getCorridorOperationCompleted == null)) {
                this.getCorridorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorridorOperationCompleted);
            }
            this.InvokeAsync("getCorridor", new object[] {
                        city,
                        resultRange,
                        token}, this.getCorridorOperationCompleted, userState);
        }
        
        private void OngetCorridorOperationCompleted(object arg) {
            if ((this.getCorridorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorridorCompleted(this, new getCorridorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getExcerpt", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExcerptInfo getExcerpt(City city, int idCorridor, ResultRange resultRange, string token) {
            object[] results = this.Invoke("getExcerpt", new object[] {
                        city,
                        idCorridor,
                        resultRange,
                        token});
            return ((ExcerptInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getExcerptAsync(City city, int idCorridor, ResultRange resultRange, string token) {
            this.getExcerptAsync(city, idCorridor, resultRange, token, null);
        }
        
        /// <remarks/>
        public void getExcerptAsync(City city, int idCorridor, ResultRange resultRange, string token, object userState) {
            if ((this.getExcerptOperationCompleted == null)) {
                this.getExcerptOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExcerptOperationCompleted);
            }
            this.InvokeAsync("getExcerpt", new object[] {
                        city,
                        idCorridor,
                        resultRange,
                        token}, this.getExcerptOperationCompleted, userState);
        }
        
        private void OngetExcerptOperationCompleted(object arg) {
            if ((this.getExcerptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExcerptCompleted(this, new getExcerptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getCorridorsCongested", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CorridorInfo getCorridorsCongested(City city, ResultRange resultRange, string token) {
            object[] results = this.Invoke("getCorridorsCongested", new object[] {
                        city,
                        resultRange,
                        token});
            return ((CorridorInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getCorridorsCongestedAsync(City city, ResultRange resultRange, string token) {
            this.getCorridorsCongestedAsync(city, resultRange, token, null);
        }
        
        /// <remarks/>
        public void getCorridorsCongestedAsync(City city, ResultRange resultRange, string token, object userState) {
            if ((this.getCorridorsCongestedOperationCompleted == null)) {
                this.getCorridorsCongestedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorridorsCongestedOperationCompleted);
            }
            this.InvokeAsync("getCorridorsCongested", new object[] {
                        city,
                        resultRange,
                        token}, this.getCorridorsCongestedOperationCompleted, userState);
        }
        
        private void OngetCorridorsCongestedOperationCompleted(object arg) {
            if ((this.getCorridorsCongestedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorridorsCongestedCompleted(this, new getCorridorsCongestedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getExcerptsCongested", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExcerptInfo getExcerptsCongested(City city, int idCorridor, ResultRange resultRange, string token) {
            object[] results = this.Invoke("getExcerptsCongested", new object[] {
                        city,
                        idCorridor,
                        resultRange,
                        token});
            return ((ExcerptInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getExcerptsCongestedAsync(City city, int idCorridor, ResultRange resultRange, string token) {
            this.getExcerptsCongestedAsync(city, idCorridor, resultRange, token, null);
        }
        
        /// <remarks/>
        public void getExcerptsCongestedAsync(City city, int idCorridor, ResultRange resultRange, string token, object userState) {
            if ((this.getExcerptsCongestedOperationCompleted == null)) {
                this.getExcerptsCongestedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExcerptsCongestedOperationCompleted);
            }
            this.InvokeAsync("getExcerptsCongested", new object[] {
                        city,
                        idCorridor,
                        resultRange,
                        token}, this.getExcerptsCongestedOperationCompleted, userState);
        }
        
        private void OngetExcerptsCongestedOperationCompleted(object arg) {
            if ((this.getExcerptsCongestedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExcerptsCongestedCompleted(this, new getExcerptsCongestedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getAllCongested", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CorridorInfo getAllCongested(City city, string token) {
            object[] results = this.Invoke("getAllCongested", new object[] {
                        city,
                        token});
            return ((CorridorInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getAllCongestedAsync(City city, string token) {
            this.getAllCongestedAsync(city, token, null);
        }
        
        /// <remarks/>
        public void getAllCongestedAsync(City city, string token, object userState) {
            if ((this.getAllCongestedOperationCompleted == null)) {
                this.getAllCongestedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCongestedOperationCompleted);
            }
            this.InvokeAsync("getAllCongested", new object[] {
                        city,
                        token}, this.getAllCongestedOperationCompleted, userState);
        }
        
        private void OngetAllCongestedOperationCompleted(object arg) {
            if ((this.getAllCongestedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCongestedCompleted(this, new getAllCongestedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class City {
        
        private string nameField;
        
        private string stateField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class Excerpt {
        
        private int codCorridorField;
        
        private int codExcerptField;
        
        private string nameExcerptField;
        
        private int levelCongestedField;
        
        private int codDirectionField;
        
        private string directionField;
        
        private City cityField;
        
        private Point pointField;
        
        private int distanceField;
        
        private int orderField;
        
        /// <remarks/>
        public int codCorridor {
            get {
                return this.codCorridorField;
            }
            set {
                this.codCorridorField = value;
            }
        }
        
        /// <remarks/>
        public int codExcerpt {
            get {
                return this.codExcerptField;
            }
            set {
                this.codExcerptField = value;
            }
        }
        
        /// <remarks/>
        public string nameExcerpt {
            get {
                return this.nameExcerptField;
            }
            set {
                this.nameExcerptField = value;
            }
        }
        
        /// <remarks/>
        public int levelCongested {
            get {
                return this.levelCongestedField;
            }
            set {
                this.levelCongestedField = value;
            }
        }
        
        /// <remarks/>
        public int codDirection {
            get {
                return this.codDirectionField;
            }
            set {
                this.codDirectionField = value;
            }
        }
        
        /// <remarks/>
        public string direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public City city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public Point point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        /// <remarks/>
        public int distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        public int order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class Point {
        
        private double xField;
        
        private double yField;
        
        /// <remarks/>
        public double x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public double y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class ExcerptInfo {
        
        private int pageCountField;
        
        private int recordCountField;
        
        private int totalRecordField;
        
        private Excerpt[] excerptField;
        
        /// <remarks/>
        public int pageCount {
            get {
                return this.pageCountField;
            }
            set {
                this.pageCountField = value;
            }
        }
        
        /// <remarks/>
        public int recordCount {
            get {
                return this.recordCountField;
            }
            set {
                this.recordCountField = value;
            }
        }
        
        /// <remarks/>
        public int totalRecord {
            get {
                return this.totalRecordField;
            }
            set {
                this.totalRecordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Excerpt[] excerpt {
            get {
                return this.excerptField;
            }
            set {
                this.excerptField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class Corridor {
        
        private int codCorridorField;
        
        private string nameCorridorField;
        
        private int levelCongestedField;
        
        private City cityField;
        
        private Point pointField;
        
        private ExcerptInfo excerptInfoField;
        
        /// <remarks/>
        public int codCorridor {
            get {
                return this.codCorridorField;
            }
            set {
                this.codCorridorField = value;
            }
        }
        
        /// <remarks/>
        public string nameCorridor {
            get {
                return this.nameCorridorField;
            }
            set {
                this.nameCorridorField = value;
            }
        }
        
        /// <remarks/>
        public int levelCongested {
            get {
                return this.levelCongestedField;
            }
            set {
                this.levelCongestedField = value;
            }
        }
        
        /// <remarks/>
        public City city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public Point point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        /// <remarks/>
        public ExcerptInfo excerptInfo {
            get {
                return this.excerptInfoField;
            }
            set {
                this.excerptInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class CorridorInfo {
        
        private int pageCountField;
        
        private int recordCountField;
        
        private int totalRecordField;
        
        private Corridor[] corridorField;
        
        /// <remarks/>
        public int pageCount {
            get {
                return this.pageCountField;
            }
            set {
                this.pageCountField = value;
            }
        }
        
        /// <remarks/>
        public int recordCount {
            get {
                return this.recordCountField;
            }
            set {
                this.recordCountField = value;
            }
        }
        
        /// <remarks/>
        public int totalRecord {
            get {
                return this.totalRecordField;
            }
            set {
                this.totalRecordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Corridor[] corridor {
            get {
                return this.corridorField;
            }
            set {
                this.corridorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class Info {
        
        private string dateField;
        
        private string timeField;
        
        private string situationField;
        
        private string kmField;
        
        private City cityField;
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public string situation {
            get {
                return this.situationField;
            }
            set {
                this.situationField = value;
            }
        }
        
        /// <remarks/>
        public string km {
            get {
                return this.kmField;
            }
            set {
                this.kmField = value;
            }
        }
        
        /// <remarks/>
        public City city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class TrafficInfo {
        
        private int pageCountField;
        
        private int recordCountField;
        
        private int totalRecordField;
        
        private Info[] infoField;
        
        /// <remarks/>
        public int pageCount {
            get {
                return this.pageCountField;
            }
            set {
                this.pageCountField = value;
            }
        }
        
        /// <remarks/>
        public int recordCount {
            get {
                return this.recordCountField;
            }
            set {
                this.recordCountField = value;
            }
        }
        
        /// <remarks/>
        public int totalRecord {
            get {
                return this.totalRecordField;
            }
            set {
                this.totalRecordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Info[] info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class ResultRange {
        
        private int pageIndexField;
        
        private int recordsPerPageField;
        
        /// <remarks/>
        public int pageIndex {
            get {
                return this.pageIndexField;
            }
            set {
                this.pageIndexField = value;
            }
        }
        
        /// <remarks/>
        public int recordsPerPage {
            get {
                return this.recordsPerPageField;
            }
            set {
                this.recordsPerPageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void getInfoCompletedEventHandler(object sender, getInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrafficInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrafficInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void getCorridorCompletedEventHandler(object sender, getCorridorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorridorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorridorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CorridorInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CorridorInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void getExcerptCompletedEventHandler(object sender, getExcerptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExcerptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExcerptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExcerptInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExcerptInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void getCorridorsCongestedCompletedEventHandler(object sender, getCorridorsCongestedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorridorsCongestedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorridorsCongestedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CorridorInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CorridorInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void getExcerptsCongestedCompletedEventHandler(object sender, getExcerptsCongestedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExcerptsCongestedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExcerptsCongestedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExcerptInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExcerptInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void getAllCongestedCompletedEventHandler(object sender, getAllCongestedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCongestedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCongestedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CorridorInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CorridorInfo)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591