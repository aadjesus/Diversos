//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3603.
// 
#pragma warning disable 1591

namespace MapRender_v3.MapRenderWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MapRenderSoap", Namespace="http://webservices.maplink2.com.br")]
    public partial class MapRender : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPanOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZoomFullExtentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZoomRadiusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZoomWindowOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZoomStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZoomCityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MapRender() {
            this.Url = global::MapRender_v3.Properties.Settings.Default.MapRender_v3_MapRenderWS_MapRender;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getMapCompletedEventHandler getMapCompleted;
        
        /// <remarks/>
        public event getZoomCompletedEventHandler getZoomCompleted;
        
        /// <remarks/>
        public event getPanCompletedEventHandler getPanCompleted;
        
        /// <remarks/>
        public event getZoomFullExtentCompletedEventHandler getZoomFullExtentCompleted;
        
        /// <remarks/>
        public event getZoomRadiusCompletedEventHandler getZoomRadiusCompleted;
        
        /// <remarks/>
        public event getZoomWindowCompletedEventHandler getZoomWindowCompleted;
        
        /// <remarks/>
        public event getZoomStateCompletedEventHandler getZoomStateCompleted;
        
        /// <remarks/>
        public event getZoomCityCompletedEventHandler getZoomCityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getMap", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getMap(string routeId, Extent extent, MapOptions mo, string token) {
            object[] results = this.Invoke("getMap", new object[] {
                        routeId,
                        extent,
                        mo,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getMapAsync(string routeId, Extent extent, MapOptions mo, string token) {
            this.getMapAsync(routeId, extent, mo, token, null);
        }
        
        /// <remarks/>
        public void getMapAsync(string routeId, Extent extent, MapOptions mo, string token, object userState) {
            if ((this.getMapOperationCompleted == null)) {
                this.getMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMapOperationCompleted);
            }
            this.InvokeAsync("getMap", new object[] {
                        routeId,
                        extent,
                        mo,
                        token}, this.getMapOperationCompleted, userState);
        }
        
        private void OngetMapOperationCompleted(object arg) {
            if ((this.getMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMapCompleted(this, new getMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getZoom", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getZoom(string routeId, Extent extent, double percZoom, MapOptions mo, string token) {
            object[] results = this.Invoke("getZoom", new object[] {
                        routeId,
                        extent,
                        percZoom,
                        mo,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getZoomAsync(string routeId, Extent extent, double percZoom, MapOptions mo, string token) {
            this.getZoomAsync(routeId, extent, percZoom, mo, token, null);
        }
        
        /// <remarks/>
        public void getZoomAsync(string routeId, Extent extent, double percZoom, MapOptions mo, string token, object userState) {
            if ((this.getZoomOperationCompleted == null)) {
                this.getZoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZoomOperationCompleted);
            }
            this.InvokeAsync("getZoom", new object[] {
                        routeId,
                        extent,
                        percZoom,
                        mo,
                        token}, this.getZoomOperationCompleted, userState);
        }
        
        private void OngetZoomOperationCompleted(object arg) {
            if ((this.getZoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZoomCompleted(this, new getZoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getPan", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getPan(string routeId, int direction, double percNavegation, Extent extent, MapOptions mo, string token) {
            object[] results = this.Invoke("getPan", new object[] {
                        routeId,
                        direction,
                        percNavegation,
                        extent,
                        mo,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getPanAsync(string routeId, int direction, double percNavegation, Extent extent, MapOptions mo, string token) {
            this.getPanAsync(routeId, direction, percNavegation, extent, mo, token, null);
        }
        
        /// <remarks/>
        public void getPanAsync(string routeId, int direction, double percNavegation, Extent extent, MapOptions mo, string token, object userState) {
            if ((this.getPanOperationCompleted == null)) {
                this.getPanOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPanOperationCompleted);
            }
            this.InvokeAsync("getPan", new object[] {
                        routeId,
                        direction,
                        percNavegation,
                        extent,
                        mo,
                        token}, this.getPanOperationCompleted, userState);
        }
        
        private void OngetPanOperationCompleted(object arg) {
            if ((this.getPanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPanCompleted(this, new getPanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getZoomFullExtent", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getZoomFullExtent(string routeId, MapOptions mo, string token) {
            object[] results = this.Invoke("getZoomFullExtent", new object[] {
                        routeId,
                        mo,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getZoomFullExtentAsync(string routeId, MapOptions mo, string token) {
            this.getZoomFullExtentAsync(routeId, mo, token, null);
        }
        
        /// <remarks/>
        public void getZoomFullExtentAsync(string routeId, MapOptions mo, string token, object userState) {
            if ((this.getZoomFullExtentOperationCompleted == null)) {
                this.getZoomFullExtentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZoomFullExtentOperationCompleted);
            }
            this.InvokeAsync("getZoomFullExtent", new object[] {
                        routeId,
                        mo,
                        token}, this.getZoomFullExtentOperationCompleted, userState);
        }
        
        private void OngetZoomFullExtentOperationCompleted(object arg) {
            if ((this.getZoomFullExtentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZoomFullExtentCompleted(this, new getZoomFullExtentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getZoomRadius", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getZoomRadius(string routeId, Point point, int radius, MapOptions mo, string token) {
            object[] results = this.Invoke("getZoomRadius", new object[] {
                        routeId,
                        point,
                        radius,
                        mo,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getZoomRadiusAsync(string routeId, Point point, int radius, MapOptions mo, string token) {
            this.getZoomRadiusAsync(routeId, point, radius, mo, token, null);
        }
        
        /// <remarks/>
        public void getZoomRadiusAsync(string routeId, Point point, int radius, MapOptions mo, string token, object userState) {
            if ((this.getZoomRadiusOperationCompleted == null)) {
                this.getZoomRadiusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZoomRadiusOperationCompleted);
            }
            this.InvokeAsync("getZoomRadius", new object[] {
                        routeId,
                        point,
                        radius,
                        mo,
                        token}, this.getZoomRadiusOperationCompleted, userState);
        }
        
        private void OngetZoomRadiusOperationCompleted(object arg) {
            if ((this.getZoomRadiusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZoomRadiusCompleted(this, new getZoomRadiusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getZoomWindow", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getZoomWindow(string routeId, Extent oldExtent, Extent newExtentInPixels, MapOptions mo, string token) {
            object[] results = this.Invoke("getZoomWindow", new object[] {
                        routeId,
                        oldExtent,
                        newExtentInPixels,
                        mo,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getZoomWindowAsync(string routeId, Extent oldExtent, Extent newExtentInPixels, MapOptions mo, string token) {
            this.getZoomWindowAsync(routeId, oldExtent, newExtentInPixels, mo, token, null);
        }
        
        /// <remarks/>
        public void getZoomWindowAsync(string routeId, Extent oldExtent, Extent newExtentInPixels, MapOptions mo, string token, object userState) {
            if ((this.getZoomWindowOperationCompleted == null)) {
                this.getZoomWindowOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZoomWindowOperationCompleted);
            }
            this.InvokeAsync("getZoomWindow", new object[] {
                        routeId,
                        oldExtent,
                        newExtentInPixels,
                        mo,
                        token}, this.getZoomWindowOperationCompleted, userState);
        }
        
        private void OngetZoomWindowOperationCompleted(object arg) {
            if ((this.getZoomWindowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZoomWindowCompleted(this, new getZoomWindowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getZoomState", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getZoomState(string routeId, MapOptions mo, string uf, string token) {
            object[] results = this.Invoke("getZoomState", new object[] {
                        routeId,
                        mo,
                        uf,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getZoomStateAsync(string routeId, MapOptions mo, string uf, string token) {
            this.getZoomStateAsync(routeId, mo, uf, token, null);
        }
        
        /// <remarks/>
        public void getZoomStateAsync(string routeId, MapOptions mo, string uf, string token, object userState) {
            if ((this.getZoomStateOperationCompleted == null)) {
                this.getZoomStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZoomStateOperationCompleted);
            }
            this.InvokeAsync("getZoomState", new object[] {
                        routeId,
                        mo,
                        uf,
                        token}, this.getZoomStateOperationCompleted, userState);
        }
        
        private void OngetZoomStateOperationCompleted(object arg) {
            if ((this.getZoomStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZoomStateCompleted(this, new getZoomStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.maplink2.com.br/getZoomCity", RequestNamespace="http://webservices.maplink2.com.br", ResponseNamespace="http://webservices.maplink2.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapInfo getZoomCity(string routeId, MapOptions mo, City city, string token) {
            object[] results = this.Invoke("getZoomCity", new object[] {
                        routeId,
                        mo,
                        city,
                        token});
            return ((MapInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getZoomCityAsync(string routeId, MapOptions mo, City city, string token) {
            this.getZoomCityAsync(routeId, mo, city, token, null);
        }
        
        /// <remarks/>
        public void getZoomCityAsync(string routeId, MapOptions mo, City city, string token, object userState) {
            if ((this.getZoomCityOperationCompleted == null)) {
                this.getZoomCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZoomCityOperationCompleted);
            }
            this.InvokeAsync("getZoomCity", new object[] {
                        routeId,
                        mo,
                        city,
                        token}, this.getZoomCityOperationCompleted, userState);
        }
        
        private void OngetZoomCityOperationCompleted(object arg) {
            if ((this.getZoomCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZoomCityCompleted(this, new getZoomCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class Extent {
        
        private double xMinField;
        
        private double yMinField;
        
        private double xMaxField;
        
        private double yMaxField;
        
        /// <remarks/>
        public double XMin {
            get {
                return this.xMinField;
            }
            set {
                this.xMinField = value;
            }
        }
        
        /// <remarks/>
        public double YMin {
            get {
                return this.yMinField;
            }
            set {
                this.yMinField = value;
            }
        }
        
        /// <remarks/>
        public double XMax {
            get {
                return this.xMaxField;
            }
            set {
                this.xMaxField = value;
            }
        }
        
        /// <remarks/>
        public double YMax {
            get {
                return this.yMaxField;
            }
            set {
                this.yMaxField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class City {
        
        private string nameField;
        
        private string stateField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class Point {
        
        private double xField;
        
        private double yField;
        
        /// <remarks/>
        public double x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public double y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class MapInfo {
        
        private string urlField;
        
        private Extent extentField;
        
        /// <remarks/>
        public string url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public Extent extent {
            get {
                return this.extentField;
            }
            set {
                this.extentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class MapSize {
        
        private int widthField;
        
        private int heightField;
        
        /// <remarks/>
        public int width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.maplink2.com.br")]
    public partial class MapOptions {
        
        private bool scaleBarField;
        
        private MapSize mapSizeField;
        
        /// <remarks/>
        public bool scaleBar {
            get {
                return this.scaleBarField;
            }
            set {
                this.scaleBarField = value;
            }
        }
        
        /// <remarks/>
        public MapSize mapSize {
            get {
                return this.mapSizeField;
            }
            set {
                this.mapSizeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getMapCompletedEventHandler(object sender, getMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getZoomCompletedEventHandler(object sender, getZoomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getPanCompletedEventHandler(object sender, getPanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getZoomFullExtentCompletedEventHandler(object sender, getZoomFullExtentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZoomFullExtentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZoomFullExtentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getZoomRadiusCompletedEventHandler(object sender, getZoomRadiusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZoomRadiusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZoomRadiusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getZoomWindowCompletedEventHandler(object sender, getZoomWindowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZoomWindowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZoomWindowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getZoomStateCompletedEventHandler(object sender, getZoomStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZoomStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZoomStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getZoomCityCompletedEventHandler(object sender, getZoomCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZoomCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZoomCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MapInfo)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591